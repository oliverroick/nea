AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Nea Stack

Parameters:
  Environment:
    Type: String
  Email:
    Type: String
Resources:
  SesSendMailExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: SesSendMailExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ses:SendEmail"
                Resource: "*"
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  DynamoDBPutItemRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: DynamoDBPutItemPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                Resource: !GetAtt [ PostCache, Arn ]

  CloudwatchEventRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource: !Ref NeaStateMachine

  PostCache:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub nea-${Environment}-post_cache
      AttributeDefinitions:
        - AttributeName : "url"
          AttributeType : "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "url"
          KeyType: HASH

  GetBlog:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub nea-${Environment}-get_blog
      Handler: nea_get_blog.lambda_handler
      Runtime: python3.6
      CodeUri: lambdas
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
  StorePostUrl:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub nea-${Environment}-store_posts
      Handler: nea_store_posts.lambda_handler
      Runtime: python3.6
      CodeUri: lambdas
      MemorySize: 128
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
      Role: !GetAtt [ DynamoDBPutItemRole, Arn ]
      Environment:
        Variables:
          db_table: !Sub nea-${Environment}-post_cache

  ComposeResults:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub nea-${Environment}-compose_results
      Handler: nea_compose_results.lambda_handler
      Runtime: python3.6
      CodeUri: lambdas
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
  SendMail:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub nea-${Environment}-send_email
      Handler: nea_send_email.lambda_handler
      Runtime: python3.6
      CodeUri: lambdas
      MemorySize: 128 
      Timeout: 30
      Role: !GetAtt [ SesSendMailExecutionRole, Arn ]

  NeaStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "GetBlog",
              "States": {
                "GetBlog": {
                  "Type": "Task",
                  "Resource": "${getBlogArn}",
                  "Next": "LoopFeedsChoice"
                },
                "LoopFeedsChoice": {
                  "Type": "Choice",
                  "Choices": [{
                    "Variable": "$.urls",
                    "NumericEquals": -1,
                    "Next": "StorePostUrls"
                  }],
                  "Default": "GetBlog"
                },
                "StorePostUrls": {
                  "Type": "Task",
                  "Resource": "${storePostUrlsArn}",
                  "Next": "ComposeResults"
                },
                "ComposeResults": {
                  "Type": "Task",
                  "Resource": "${composeResultsArn}",
                  "Next": "SendEmail"
                },
                "SendEmail": {
                  "Type": "Task",
                  "Resource": "${sendMailArn}",
                  "End": true
                }
              }
            }
          - {getBlogArn: !GetAtt [ GetBlog, Arn ],
             storePostUrlsArn: !GetAtt [ StorePostUrl, Arn ],
             composeResultsArn: !GetAtt [ ComposeResults, Arn ],
             sendMailArn: !GetAtt [ SendMail, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  NeaTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Triggers the NeaStateMachine"
      ScheduleExpression: "cron(0 7 ? * 2 *)"
      Targets:
        - Arn: !Ref NeaStateMachine
          Id: NeaTrigger
          Input: 
            !Sub
              |-
              {
                "email_from": "${Email}",
                "email_to": "${Email}",
                "urls": [
                  "https://macwright.org/rss.xml",
                  "http://randsinrepose.com/feed/",
                  "https://www.zeldman.com/feed/",
                  "https://zachholman.com/atom.xml",
                  "http://k1z.blog.uni-heidelberg.de/feed/",
                  "https://daringfireball.net/feeds/articles",
                  "https://cennydd.com/blog?format=rss",
                  "https://airbagindustries.com/index.xml",
                  "https://uclexcites.blog/feed/",
                  "https://developmentseed.org/rss.xml",
                  "https://povesham.wordpress.com/feed/",
                  "http://www.aaronsw.com/2002/feeds/pgessays.rss",
                  "https://landscapevalues.org/ispm/feed/",
                  "https://joemoran.net/feed/",
                  "https://wille.me/feed.xml",
                  "https://planet.osgeo.org/rss20.xml",
                  "https://www.gislounge.com/feed/",
                  "https://www.justinobeirne.com/new-items-feed?format=rss",
                  "https://alukach.com/index.xml"
                ]
              }
          RoleArn: !GetAtt [ CloudwatchEventRole, Arn ]
